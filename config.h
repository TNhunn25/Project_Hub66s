#ifndef PROTOCOL_HANDLER_H
#define PROTOCOL_HANDLER_H

#include <WiFi.h>
#include <ArduinoJson.h>
#include <MD5Builder.h>
#include "config.h"
#include <Preferences.h>

// C·∫•u tr√∫c cho tin nh·∫Øn ESP-NOW
extern PayloadStruct message;

// Khai b√°o Preferences l√† extern
extern Preferences preferences;

extern unsigned long runtime;
extern uint32_t nod; // S·ªë l∆∞·ª£ng thi·∫øt b·ªã, m·∫∑c ƒë·ªãnh l√† 10

// Chuy·ªÉn ƒë·ªïi MAC th√†nh String
String macToString(const uint8_t* mac) {
    char macStr[18];
    snprintf(macStr,  sizeof(macStr), "%02X:%02X:%02X:%02X:%02X:%02X",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    return String(macStr);
}

// T·∫°o tin nh·∫Øn ph·∫£n h·ªìi
String createMessage(int id_src, int id_des, String mac_src, String mac_des, uint8_t opcode, DynamicJsonDocument data, unsigned long timestamp = 0) {
    if (timestamp == 0) {
        timestamp = millis() / 1000; // M√¥ ph·ªèng th·ªùi gian Unix
    }
    String dataStr;
    serializeJson(data, dataStr); // Chuy·ªÉn d·ªØ li·ªáu th√†nh chu·ªói JSON
    String auth = md5Hash(id_src, id_des, mac_src, mac_des, opcode, dataStr, timestamp); // T·∫°o m√£ MD5
    
    DynamicJsonDocument jsonDoc(512);
    jsonDoc["id_src"] = id_src; // ID ngu·ªìn
    jsonDoc["id_des"] = id_des; // ID ƒë√≠ch
    jsonDoc["mac_src"] = mac_src; // MAC ngu·ªìn
    jsonDoc["mac_des"] = mac_des; // MAC ƒë√≠ch
    jsonDoc["opcode"] = opcode; // Opcode
    jsonDoc["data"] = data; // D·ªØ li·ªáu
    jsonDoc["time"] = timestamp; // Th·ªùi gian
    jsonDoc["auth"] = auth; // M√£ x√°c th·ª±c

    String messageStr;
    serializeJson(jsonDoc, messageStr); // Chuy·ªÉn th√†nh chu·ªói JSON
    return messageStr;
}

// G·ª≠i ph·∫£n h·ªìi
void sendResponse(int id_src, int id_des, String mac_src, String mac_des, uint8_t opcode, DynamicJsonDocument data, const uint8_t *targetMac) {
    String output = createMessage(id_src, id_des, mac_src, mac_des, opcode, data); // T·∫°o tin nh·∫Øn
    //T·∫°o tin nh·∫Øn
    if (output.length() > sizeof(message.payload)) {
        Serial.println("‚ùå Payload qu√° l·ªõn!");
        led.setState(CONNECTION_ERROR);
        return;
    }
    output.toCharArray(message.payload, sizeof(message.payload)); // Chuy·ªÉn v√†o payload

    esp_now_peer_info_t peerInfo = {};
    memcpy(peerInfo.peer_addr, targetMac, 6); // FF:FF:FF:FF:FF:FF
    peerInfo.channel = 1; // K√™nh c·ªë ƒë·ªãnh ƒë·ªÉ ƒë·ªìng b·ªô v·ªõi sender 
    peerInfo.encrypt = false; // T·∫°m th·ªùi t·∫Øt m√£ h√≥a 
    if (!esp_now_is_peer_exist(targetMac)) {
        if (esp_now_add_peer(&peerInfo) != ESP_OK) {
            Serial.println("‚ùå Failed to add peer!");
            return;
        }
        Serial.println("ƒê√£ th√™m peer");
    }

    esp_now_send(targetMac, (uint8_t *)&message, sizeof(message)); // G·ª≠i qua ESP-NOW
    Serial.println("\nüì§ ƒê√£ g·ª≠i ph·∫£n h·ªìi:");
    Serial.println(output);

    //X√≥a peer sau khi g·ª≠i 
    // if (esp_now_is_peer_exist(targetMac)) {
    //   esp_now_del_peer(targetMac);
    // } else {
    //   Serial.println("Peer kh√¥ng t·ªìn t·∫°i");
    // }
}

// L∆∞u d·ªØ li·ªáu license v√†o NVS (Non-Volatile Storage)
//NVS: ƒë·∫£m b·∫£o d·ªØ li·ªáu kh√¥ng b·ªã m·∫•t khi thi·∫øt b·ªã t·∫Øt ngu·ªìn.
void saveLicenseData() {
    preferences.begin("license", false); // M·ªü namespace "license" ·ªü ch·∫ø ƒë·ªô read/write
    preferences.putInt("lid", globalLicense.lid);
    preferences.putULong("created", globalLicense.created);
    preferences.putInt("duration", globalLicense.duration);
    preferences.putInt("remain", globalLicense.remain);
    preferences.putBool("expired_flag", globalLicense.expired_flag);
    preferences.putULong("runtime", runtime);
    preferences.putUInt("nod", globalLicense.nod); // B·ªï sung: L∆∞u NOD
    preferences.putULong("last_save", millis()/1000); // L∆∞u th·ªùi ƒëi·ªÉm l∆∞u cu·ªëi c√πng
    preferences.end();
    Serial.println("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu license v√†o NVS");

    Serial.print("Expired: "); Serial.println(globalLicense.expired_flag ? 1 : 0);
    Serial.print("Remain: "); Serial.println(globalLicense.remain);
}

// L∆∞u c·∫•u h√¨nh thi·∫øt b·ªã
void saveDeviceConfig() {
    preferences.begin("license", false);
    preferences.putUInt("config_lid", config_lid);
    preferences.putUInt("config_id", config_id);
    preferences.putUInt("nod", ::nod);
    preferences.end();
}

// T·∫£i d·ªØ li·ªáu license t·ª´ NVS (g·ªçi trong setup())
void loadLicenseData() {
    preferences.begin("license", true); // M·ªü namespace "license" ·ªü ch·∫ø ƒë·ªô read-only
    globalLicense.lid = preferences.getInt("lid", 0);
    config_lid = preferences.getInt("config_lid", config_lid);
    config_id = preferences.getInt("config_id", config_id);
    globalLicense.created = preferences.getULong("created", 0);
    globalLicense.duration = preferences.getInt("duration", 0);
    globalLicense.remain = preferences.getInt("remain", 0);
    globalLicense.expired_flag = preferences.getBool("expired_flag", false);
    unsigned long last_save = preferences.getULong("last_save", 0);
    runtime = preferences.getULong("runtime", 0);
    globalLicense.nod = preferences.getUInt("nod", 10); // B·ªï sung: ƒê·ªçc NOD, m·∫∑c ƒë·ªãnh 10
    ::nod = globalLicense.nod;
    preferences.end();

    Serial.println("‚úÖ ƒê√£ ƒë·ªçc v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu license t·ª´ NVS:");
    Serial.print("LID: "); Serial.println(globalLicense.lid);
    Serial.print("Expired: "); Serial.println(globalLicense.expired_flag ? 1 : 0);
    // Serial.print("Remain: "); Serial.println(globalLicense.remain);
    Serial.print("Runtime: "); Serial.println(runtime);
    } 

// X·ª≠ l√Ω d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
void onReceive(const esp_now_recv_info *recv_info, const uint8_t *incomingData, int len) {
    const uint8_t *mac_addr = recv_info->src_addr;
    String myMac = WiFi.macAddress();
    time_t now = time(nullptr);
    Serial.println("\nüì© Nh·∫≠n package tin:");

    // Ph√¢n t√≠ch JSON
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, incomingData, len);
    if (error) {
        Serial.print("‚ùå L·ªói gi·∫£i m√£ JSON: ");
        Serial.println(error.c_str());
        DynamicJsonDocument respDoc(256);
        respDoc["status"] = 255;
        sendResponse(0, 0, myMac, "FF:FF:FF:FF:FF:FF", 0, respDoc, mac_addr);
        led.setState(CONNECTION_ERROR);
        return;
    }

    // L·∫•y c√°c tr∆∞·ªùng t·ª´ g√≥i tin
    int id_src = doc["id_src"].as<int>(); // ID c·ªßa thi·∫øt b·ªã g·ª≠i
    int id_des = doc["id_des"].as<int>(); // ID c·ªßa thi·∫øt b·ªã nh·∫≠n
    String mac_src = doc["mac_src"].as<String>();   // MAC c·ªßa thi·∫øt b·ªã g·ª≠i
    String mac_des = doc["mac_des"].as<String>();   // MAC c·ªßa thi·∫øt b·ªã nh·∫≠n
    uint8_t opcode = doc["opcode"].as<uint8_t>();
    String dataStr;
    serializeJson(doc["data"], dataStr);
    unsigned long packetTime = doc["time"].as<long>();
    String receivedAuth = doc["auth"].as<String>();

    // B·ªè qua g√≥i kh√¥ng d√†nh cho thi·∫øt b·ªã
    if (id_des != config_id && id_des != 0 && mac_des != myMac && mac_des != "FF:FF:FF:FF:FF:FF") {
        Serial.println("‚ùå G√≥i tin kh√¥ng d√†nh cho thi·∫øt b·ªã n√†y!");
        return;
    }

    // Ki·ªÉm tra x√°c th·ª±c MD5
    String calculatedAuth = md5Hash(id_src, id_des, mac_src, mac_des, opcode, dataStr, packetTime);
    if (!receivedAuth.equalsIgnoreCase(calculatedAuth)) {
        DynamicJsonDocument respDoc(256);
        respDoc["status"] = 1;
        sendResponse(config_id, id_src, myMac, mac_src, opcode | 0x80, respDoc, mac_addr);
        Serial.println("‚ùå X√°c th·ª±c MD5 th·∫•t b·∫°i!");
        led.setState(CONNECTION_ERROR);
        return;
    }
    Serial.println("‚úÖ X√°c th·ª±c MD5 th√†nh c√¥ng!");

    // In th√¥ng tin g√≥i tin
    Serial.print("From MAC: ");
    for (int i = 0; i < 6; i++) {
        Serial.printf("%02X", mac_addr[i]);
        if (i < 5) Serial.print(":");
    }
    Serial.println();
    //test 
    Serial.println("Current config_id: " + String(config_id));
    Serial.println("Current globalLicense.lid: " + String(globalLicense.lid));
    Serial.println("Full received packet:");

    Serial.print("Opcode: 0x"); Serial.println(opcode, HEX);
    serializeJsonPretty(doc, Serial);
    Serial.println();

    // serializeJsonPretty(doc, Serial);
    // Serial.println();

    // X·ª≠ l√Ω theo opcode
    switch (opcode) {
        case LIC_SET_LICENSE: {
            JsonObject data = doc["data"].as<JsonObject>();
            int lid = data["lid"].as<int>(); // Changed from String to int
            int id = data["id"].as<int>(); // Changed from String to int
            time_t created = data["created"].as<long>();
            int duration = data["duration"].as<int>();
            int expired = data["expired"].as<int>(); //ki·ªÉm tra bi·∫øn n·∫øu ƒë√∫ng license c√≤n hi·ªáu l·ª±c set_lic v√† ph·∫£n h·ªìi. 
            int nod = data["nod"].as<int>();
            //N·∫øu sai th√¨ ph·∫£n h·ªìi l·∫°i lic h·∫øt hi·ªáu l·ª±c. 

             DynamicJsonDocument respDoc(256);
            bool isValid = false;
            String error_msg = "";    
            //Ki·ªÉm tra LID v√† ID theo y√™u c·∫ßu
            if(lid !=0 && lid == config_lid){
                //LID h·ª£p l·ªá
                //Ki·ªÉm tra ID
                if(id == 0 || id == config_id) {
                    isValid = true; //  ID kh·ªõp v·ªõi thi·∫øt b·ªã ho·∫∑c ID = 0
                }else {
                    error_msg= "ID kh√¥ng d√†nh cho thi·∫øt b·ªã n√†y";
                }
            } else {
                error_msg= "LID kh√¥ng h·ª£p l·ªá";
            }
            if (isValid) {
                if (expired){
                    globalLicense.created = created;
                    globalLicense.duration = duration;
                    globalLicense.nod = nod; // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã 
                    runtime = 0;
                    saveLicenseData();

                    respDoc ["lid"] = lid; 
                    respDoc ["nod"] = globalLicense.nod; // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
                    respDoc["status"] = 0; // Th√†nh c√¥ng
                    Serial.println("‚úÖ C·∫≠p nh·∫≠t gi·∫•y ph√©p th√†nh c√¥ng: LID = " + String(lid) + ", ID = " + String(id));
                    led.setState(NORMAL_STATUS);
                    sendResponse(config_id, id_src, myMac, mac_src, LIC_SET_LICENSE | 0x80, respDoc, mac_addr);
                    // //reset esp 
                    // delay(1000); // Delay for 1000 milliseconds
                    // ESP.restart();
                    
                } else {
                    respDoc["status"] = 3; // Gi·∫•y ph√©p h·∫øt h·∫°n
                    respDoc["nod"] = globalLicense.nod;
                    Serial.println("‚ùå Gi·∫•y ph√©p h·∫øt hi·ªáu l·ª±c");
                    sendResponse(config_id, id_src, myMac, mac_src, LIC_SET_LICENSE | 0x80, respDoc, mac_addr);
                    led.setState(CONNECTION_ERROR);
                }
            } else {
                respDoc["status"] = 1; // LID ho·∫∑c ID kh√¥ng h·ª£p l·ªá
                respDoc["error_msg"] = error_msg;
                Serial.println("‚ùå L·ªói: " + error_msg + " (LID = " + String(lid) + ", ID = " + String(id) + ", config_id = " + String(config_id) + ")");
                sendResponse(config_id, id_src, myMac, mac_src, LIC_SET_LICENSE | 0x80, respDoc, mac_addr);
                led.setState(CONNECTION_ERROR);
            }
            break;
        }         

        case LIC_GET_LICENSE: {
            JsonObject data = doc["data"].as<JsonObject>();
            int lid = data["lid"].as<int>();
            DynamicJsonDocument respDoc(256);

            if (lid == config_lid || lid == 0) {
                respDoc["lid"] = globalLicense.lid;
                respDoc["created"] = globalLicense.created;
                respDoc["expired"] = globalLicense.expired_flag ? 1 : 0;
                respDoc["duration"] = globalLicense.duration;
                respDoc["remain"] = globalLicense.remain;
                respDoc["nod"] = globalLicense.nod;
                respDoc["status"] = 0; // Th√†nh c√¥ng
                Serial.println("‚úÖ License info sent for LID = " + String(lid));
                sendResponse(config_id, id_src, myMac, mac_src, LIC_GET_LICENSE | 0x80, respDoc, mac_addr);
                led.setState(NORMAL_STATUS);

            } else {
                // respDoc["lid"] = 0;
                // respDoc["status"] = 1; // LID ho·∫∑c Device ID kh√¥ng h·ª£p l·ªá 
                // respDoc["error_msg"] = "Invalid LID";
                 Serial.println("‚ùå LID kh√¥ng h·ª£p l·ªá: " + String(lid));
                led.setState(CONNECTION_ERROR);
            }
            break;
        }

        // case CONFIG_DEVICE: {
        //     JsonObject data = doc["data"].as<JsonObject>();
        //     int id = config_id; // Changed from String to int
        //     int lid = data["lid"].as<int>(); // Changed from String to int
        //     uint32_t nod = data["nod"].as<uint32_t>(); // L·∫•y NOD t·ª´ JSON
        //     DynamicJsonDocument respDoc(256);

        //     globalLicense.lid = lid; 
        //     // globalLicense.id = id; 
        //     globalLicense.nod = nod; // C·∫≠p nh·∫≠t NOD

        //     // L∆∞u NOD v√†o Preferences
        //     //save lid, id, nod
        //     preferences.begin("license", false);
        //     preferences.putUInt("lid", globalLicense.lid);
        //     // preferences.putUInt("id", globalLicense.id);
        //     preferences.putUInt("nod", globalLicense.nod);
        //     preferences.end();

        //     respDoc["status"] = 0; // Th√†nh c√¥ng
        //     sendResponse(config_id, id_src, myMac, mac_src, CONFIG_DEVICE | 0x80, respDoc, mac_addr);
        //     Serial.println("‚úÖ NOD updated successfully to " + String(nod));
        //     led.setState(NORMAL_STATUS);
        //     break;
        // }

        case CONFIG_DEVICE: {
            JsonObject data = doc["data"].as<JsonObject>();
            int lid = data["new_lid"].as<int>();
            uint32_t nod = data["nod"].as<uint32_t>();
            int id = data["new_id"].as<int>(); // M·∫∑c ƒë·ªãnh l·∫•y config_id

            // // Nh·∫≠p ID v√† LID t·ª´ m√†n h√¨nh (n·∫øu c√≥)
            // bool screenInput = false;
            // int screen_lid = getScreenInput("lid"); // H√†m gi·∫£ ƒë·ªãnh t·ª´ sender.h
            // int screen_id = getScreenInput("id");   // H√†m gi·∫£ ƒë·ªãnh t·ª´ sender.h
            // if (screen_lid >= 0 && screen_id >= 0) { // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            //     lid = screen_lid;
            //     id = screen_id;
            //     screenInput = true;
            // } else if (data.containsKey("id")) {
            //     id = data["id"].as<int>(); // L·∫•y ID t·ª´ JSON n·∫øu kh√¥ng nh·∫≠p t·ª´ m√†n h√¨nh
            // }

            DynamicJsonDocument respDoc(256);
            bool isValid = false;
            String error_msg; // th√¥ng b√°o l·ªói

            // Ki·ªÉm tra LID v√† ID v√† s·ªë l∆∞·ª£ng thi·∫øt b·ªã (NOD)
            if (lid == 0) {
                isValid = false;
                error_msg = "LID kh√¥ng h·ª£p l·ªá";
            } else if (id == 0) {
                 isValid = false;
                 error_msg = "ID kh√¥ng h·ª£p l·ªá";
            } else if (id != config_id) {
                isValid = false;
                error_msg = "ID kh√¥ng kh·ªõp v·ªõi thi·∫øt b·ªã n√†y";
             } else {
                isValid = true;
            }
            if (isValid) {
                //C·∫≠p nh·∫≠t c·∫•u h√¨nh
                    globalLicense.lid = lid;
                    globalLicense.id = id;
                    globalLicense.nod = nod;

                    preferences.begin("license", false);
                    preferences.putUInt("lid", globalLicense.lid);
                    preferences.putUInt("id", globalLicense.id);
                    preferences.putUInt("nod", globalLicense.nod);
                    preferences.end();
                    
                    //ch·ªõp LED ƒë·ªÉ x√°c nh·∫≠n 
                    led.setState(BLINK_CONFIRM, 3); //ch·ªõp 3 l·∫ßn
                    Serial.println("‚úÖ C·∫•u h√¨nh th√†nh c√¥ng: LID = " + String(lid) + ", ID = " + String(id) + ", NOD = " + String(nod));

                    respDoc["status"] = 0;
                    respDoc["lid"] = globalLicense.lid;
                    respDoc["id"] = globalLicense.id;
                    respDoc["nod"] = globalLicense.nod;
    
                } else {
                respDoc["status"] = 1;
                respDoc["error_msg"] = error_msg;
                Serial.println("‚ùå L·ªói: " + error_msg + " (LID = " + String(lid) + ", ID = " + String(id) + ", config_id = " + String(config_id) + ")");
                led.setState(CONNECTION_ERROR);
            }

            sendResponse(config_id, id_src, myMac, mac_src, CONFIG_DEVICE | 0x80, respDoc, mac_addr);
            break;
        }

        case LIC_LICENSE_DELETE: {
            int lid = doc["data"]["lid"].as<int>();
            DynamicJsonDocument respDoc(256);
            respDoc["lid"] = lid;
            respDoc["status"] = (lid == globalLicense.lid) ? 0 : 3; // Th√†nh c√¥ng ho·∫∑c kh√¥ng t√¨m th·∫•y
            if (lid == globalLicense.lid) {
                // X√≥a license b·∫±ng c√°ch ƒë·∫∑t v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
                globalLicense.lid = 0;
                globalLicense.created = 0;
                globalLicense.duration = 0;
                globalLicense.remain = 0;
                globalLicense.expired_flag = false;
                saveLicenseData(); // L∆∞u tr·∫°ng th√°i m·ªõi
            }
            sendResponse(config_id, id_src, myMac, mac_src, LIC_LICENSE_DELETE | 0x80, respDoc, mac_addr);
            Serial.println(lid == globalLicense.lid ? "‚úÖ ƒê√£ x√≥a license cho LID = " + String(lid) : "‚ùå Kh√¥ng t√¨m th·∫•y license cho LID = " + String(lid));
            led.setState(lid == globalLicense.lid ? NORMAL_STATUS : CONNECTION_ERROR);
            break;
        }

        case LIC_LICENSE_DELETE_ALL: {
            // X√≥a t·∫•t c·∫£ license
            globalLicense.lid = 0;
            globalLicense.created = 0;
            globalLicense.duration = 0;
            globalLicense.remain = 0;
            globalLicense.expired_flag = false;
            saveLicenseData(); // L∆∞u tr·∫°ng th√°i m·ªõi
            DynamicJsonDocument respDoc(256);
            respDoc["status"] = 0; // Th√†nh c√¥ng
            sendResponse(config_id, id_src, myMac, mac_src, LIC_LICENSE_DELETE_ALL | 0x80, respDoc, mac_addr);
            Serial.println("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ license.");
            led.setState(NORMAL_STATUS);
            break;
        }

        case LIC_TIME_GET: {
            DynamicJsonDocument respDoc(256);
            respDoc["time"] = millis() / 1000; // Tr·∫£ v·ªÅ th·ªùi gian receiver
            respDoc["status"] = 0;
            sendResponse(config_id, id_src, myMac, mac_src, LIC_TIME_GET | 0x80, respDoc, mac_addr);
            Serial.println("‚úÖ Time info sent.");
            led.setState(NORMAL_STATUS);
            break;
        }

        case LIC_INFO: {
            DynamicJsonDocument respDoc(256);
            respDoc["deviceName"] = globalLicense.deviceName;
            respDoc["version"] = globalLicense.version;
            respDoc["status"] = 0;
            sendResponse(config_id, id_src, myMac, mac_src, LIC_INFO_RESPONSE, respDoc, mac_addr);
            Serial.println("‚úÖ Device info sent.");
            led.setState(NORMAL_STATUS);
            break;
        }

        default: {
            DynamicJsonDocument respDoc(256);
            respDoc["status"] = 255; // Opcode kh√¥ng x√°c ƒë·ªãnh
            sendResponse(config_id, id_src, myMac, mac_src, opcode | 0x80, respDoc, mac_addr);
            Serial.printf("‚ùå Unknown opcode: 0x%02X\n", opcode);
            led.setState(CONNECTION_ERROR);
            break;
        }
    }
}
#endif // PROTOCOL_HANDLER_H
