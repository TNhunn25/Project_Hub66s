#ifndef PROTOCOL_HANDLER_H
#define PROTOCOL_HANDLER_H

#include <WiFi.h>
#include <ArduinoJson.h>
#include <MD5Builder.h>
#include "config.h"
#include <Preferences.h>
#include <painlessMesh.h>

extern painlessMesh mesh; // Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng mesh to√†n c·ª•c

extern bool dang_gui;            // c·ªù ƒëang ch·ªù response
extern unsigned long lastSendTime;


// C·∫•u tr√∫c cho tin nh·∫Øn ph·∫£n h·ªìi
extern PayloadStruct message;

// NVS ƒë·ªÉ l∆∞u tr·ªØ license
extern Preferences preferences;

extern unsigned long runtime;
extern uint32_t nod; // S·ªë l∆∞·ª£ng thi·∫øt b·ªã, m·∫∑c ƒë·ªãnh l√† 10

// Chuy·ªÉn ƒë·ªïi MAC th√†nh String
String macToString(const uint8_t *mac)
{
    char buf[18];
    snprintf(buf, sizeof(buf), "%02X:%02X:%02X:%02X:%02X:%02X",
             mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    return String(buf);
}

// T·∫°o tin nh·∫Øn ph·∫£n h·ªìi
String createMessage(int id_src, int id_des, uint8_t opcode, const JsonVariant &data,
                     unsigned long timestamp = 0)
{
    if (timestamp == 0)
    {
        timestamp = millis() / 1000; // M√¥ ph·ªèng th·ªùi gian Unix
    }
    String dataStr;
    serializeJson(data, dataStr);   // Chuy·ªÉn d·ªØ li·ªáu th√†nh chu·ªói JSON

    // T·∫°o m√£ MD5 x√°c th·ª±c
    String auth = md5Hash(id_src, id_des, opcode, dataStr, timestamp); // T·∫°o m√£ MD5
    DynamicJsonDocument jsonDoc(512);
    jsonDoc["id_src"] = id_src;   // ID ngu·ªìn
    jsonDoc["id_des"] = id_des;   // ID ƒë√≠ch
    jsonDoc["opcode"] = opcode;   // Opcode
    jsonDoc["data"] = data;       // D·ªØ li·ªáu
    jsonDoc["time"] = timestamp;  // Th·ªùi gian
    jsonDoc["auth"] = auth;       // M√£ x√°c th·ª±c

    String out;
    serializeJson(jsonDoc, out); // Chuy·ªÉn th√†nh chu·ªói JSON
    return out;
}

// G·ª≠i response qua mesh
void sendResponse(int id_src, int id_des, uint8_t opcode, const JsonVariant &data, uint32_t destNodeId)
{
// 1) build JSON
  String packet = createMessage(id_src, id_des, opcode, data);
  if (packet.length() > sizeof(message.payload)) {
    Serial.println("‚ùå Payload qu√° l·ªõn, kh√¥ng g·ª≠i ƒë∆∞·ª£c");
    led.setState(CONNECTION_ERROR);
    return;
  }
  packet.toCharArray(message.payload, sizeof(message.payload));

  // 2) g·ª≠i qua mesh unicast
  dang_gui = true;
  bool ok = mesh.sendSingle(destNodeId, packet);
  Serial.printf("üì§ [mesh] sendSingle to %u %s\n", destNodeId, ok ? "OK" : "FAIL");
  Serial.println(packet);
  lastSendTime = millis();
    if (!ok) {
        Serial.println("‚ùå G·ª≠i g√≥i tin th·∫•t b·∫°i");
        led.setState(CONNECTION_ERROR);
    } else {
        Serial.println("‚úÖ G·ª≠i g√≥i tin th√†nh c√¥ng");
        led.setState(FLASH_TWICE); // Ch·ªõp LED 2 l·∫ßn ƒë·ªÉ x√°c nh·∫≠n g·ª≠i th√†nh c√¥ng
    }
}

void xu_ly_data(uint32_t from,
                int id_src,
                int id_des,
                uint8_t opcode,
                const JsonVariant &data,
                unsigned long packetTime,
                const String &recvAuth);

//Callback khi nh·∫≠n g√≥i tin t·ª´ mesh
void onMeshReceive(uint32_t from, String &msg)
{
    Serial.printf("[mesh] Received from %u: %s\n", from, msg.c_str());

    // parse JSON
    StaticJsonDocument<512> doc;
    DeserializationError error = deserializeJson(doc, msg);
    if (error)
    {
        Serial.println("‚ùå Failed to parse JSON");
        return;
    }

    // L·∫•y th√¥ng tin t·ª´ JSON
    int id_src = doc["id_src"];
    int id_des = doc["id_des"];
    uint8_t opcode = doc["opcode"];
    JsonVariant data = doc["data"];
    unsigned long timestamp = doc["time"];
    String auth = doc["auth"];

    // Ki·ªÉm tra m√£ x√°c th·ª±c
    String expectedAuth = md5Hash(id_src, id_des, opcode, data.as<String>(), timestamp);
    if (auth != expectedAuth)
    {
        Serial.println("‚ùå Invalid auth");
        return;
    }

    dang_gui = false; // Reset c·ªù ƒëang g·ª≠i
    xu_ly_data(from, id_src, id_des, opcode, data, timestamp, auth);

    // X·ª≠ l√Ω g√≥i tin h·ª£p l·ªá
    Serial.println("‚úÖ Valid packet received");
}

// L∆∞u d·ªØ li·ªáu license v√†o NVS (Non-Volatile Storage)
// NVS: ƒë·∫£m b·∫£o d·ªØ li·ªáu kh√¥ng b·ªã m·∫•t khi thi·∫øt b·ªã t·∫Øt ngu·ªìn.
void saveLicenseData()
{
    preferences.begin("license", false); // M·ªü namespace "license" ·ªü ch·∫ø ƒë·ªô read/write
    preferences.putInt("lid", globalLicense.lid);
    preferences.putULong("created", globalLicense.created);
    preferences.putInt("duration", globalLicense.duration);
    preferences.putInt("remain", globalLicense.remain);
    preferences.putBool("expired_flag", globalLicense.expired_flag);
    preferences.putULong("runtime", runtime);
    preferences.putUInt("nod", globalLicense.nod);      // B·ªï sung: L∆∞u NOD
    preferences.putULong("last_save", millis() / 1000); // L∆∞u th·ªùi ƒëi·ªÉm l∆∞u cu·ªëi c√πng
    preferences.end();
    Serial.println("‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu license v√†o NVS");

    Serial.print("Expired: ");
    Serial.println(globalLicense.expired_flag ? 1 : 0);
    Serial.print("Remain: ");
    Serial.println(globalLicense.remain);
}

// L∆∞u c·∫•u h√¨nh thi·∫øt b·ªã
void saveDeviceConfig()
{
    preferences.begin("license", false);
    preferences.putUInt("config_lid", config_lid);
    preferences.putUInt("config_id", config_id);
    preferences.putUInt("nod", ::nod);
    preferences.end();
}

// T·∫£i d·ªØ li·ªáu license t·ª´ NVS (g·ªçi trong setup())
void loadLicenseData()
{
    preferences.begin("license", true); // M·ªü namespace "license" ·ªü ch·∫ø ƒë·ªô read-only
    globalLicense.lid = preferences.getInt("lid", 0);
    config_lid = preferences.getInt("config_lid", config_lid);
    config_id = preferences.getInt("config_id", config_id);
    globalLicense.created = preferences.getULong("created", 0);
    globalLicense.duration = preferences.getInt("duration", 0);
    globalLicense.remain = preferences.getInt("remain", 0);
    globalLicense.expired_flag = preferences.getBool("expired_flag", false);
    unsigned long last_save = preferences.getULong("last_save", 0);
    runtime = preferences.getULong("runtime", 0);
    globalLicense.nod = preferences.getUInt("nod", 10); // B·ªï sung: ƒê·ªçc NOD, m·∫∑c ƒë·ªãnh 10
    ::nod = globalLicense.nod;
    preferences.end();

    Serial.println("‚úÖ ƒê√£ ƒë·ªçc v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu license t·ª´ NVS:");
    Serial.print("LID: ");
    Serial.println(globalLicense.lid);
    Serial.print("Expired: ");
    Serial.println(globalLicense.expired_flag ? 1 : 0);
    // Serial.print("Remain: "); Serial.println(globalLicense.remain);
    Serial.print("Runtime: ");
    Serial.println(runtime);
}

void xu_ly_data(uint32_t from, int id_src, int id_des, uint8_t opcode, const JsonVariant &data,
                unsigned long packetTime, const String &recvAuth)
{
    StaticJsonDocument<512> doc;
    Serial.println("\nüì© X·ª≠ l√Ω data t·ª´ Mesh:");

    // B·ªè qua n·∫øu kh√¥ng ph·∫£i ƒë√≠ch
    if (id_des != config_id && id_des != 0) {
      Serial.println("‚ùå Kh√¥ng d√†nh cho node n√†y");
      return;
    }

    // MD5 verify
    String dataStr;
    serializeJson(data, dataStr);
    String calcAuth = md5Hash(id_src, id_des, opcode, dataStr, packetTime);
    if (!recvAuth.equalsIgnoreCase(calcAuth)) {
      Serial.println("‚ùå MD5 auth failed");
      DynamicJsonDocument respDoc(128);
      respDoc["status"] = 1;
      sendResponse(config_id, id_src, opcode|0x80, respDoc, from);
      led.setState(CONNECTION_ERROR);
      return;
    }
    Serial.println("‚úÖ MD5 auth success");
    // test
    Serial.println("Current config_id: " + String(config_id));
    Serial.println("Current globalLicense.lid: " + String(globalLicense.lid));
    Serial.println("Full received packet:");

    Serial.print("Opcode: 0x");
    Serial.println(opcode, HEX);
    serializeJsonPretty(doc, Serial);
    Serial.println();

    // X·ª≠ l√Ω theo opcode
    switch (opcode)
    {
    case LIC_SET_LICENSE:
    {
        JsonObject data = doc["data"].as<JsonObject>();
        int lid = data["lid"].as<int>(); // Changed from String to int
        int id = data["id"].as<int>();   // Changed from String to int
        time_t created = data["created"].as<long>();
        int duration = data["duration"].as<int>();
        int expired = data["expired"].as<int>(); // ki·ªÉm tra bi·∫øn n·∫øu ƒë√∫ng license c√≤n hi·ªáu l·ª±c set_lic v√† ph·∫£n h·ªìi.
        int nod = data["nod"].as<int>();
        // N·∫øu sai th√¨ ph·∫£n h·ªìi l·∫°i lic h·∫øt hi·ªáu l·ª±c.

        DynamicJsonDocument respDoc(256);
        bool isValid = false;
        String error_msg = "";

        // Ki·ªÉm tra LID v√† ID theo y√™u c·∫ßu
        if (lid != 0 && lid == config_lid)
        { // LID ph·∫£i kh√°c 0 v√† kh·ªõp v·ªõi config_lid
            if (id == 0 || id == config_id)
            {                   // ID c√≥ th·ªÉ l√† 0 ho·∫∑c kh·ªõp v·ªõi config_id
                isValid = true; //  ID kh·ªõp v·ªõi thi·∫øt b·ªã ho·∫∑c ID = 0
            }
            else
            {
                error_msg = "ID kh√¥ng d√†nh cho thi·∫øt b·ªã n√†y"; // ID sai
            }
        }
        else
        {
            error_msg = "LID kh√¥ng h·ª£p l·ªá"; // LID sai
        }
        if (isValid)
        {
            if (expired)
            {
                globalLicense.created = created;
                globalLicense.duration = duration;
                globalLicense.nod = nod;      // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
                start_time = millis() / 1000; // ƒë√°nh d·∫•u m·ªëc th·ªùi gian m·ªõi
                runtime = 0;
                globalLicense.remain = duration;    // l√†m m·ªõi th·ªùi gian c√≤n l·∫°i
                globalLicense.expired_flag = false; // ch·∫Øc ch·∫Øn ƒë√°nh d·∫•u
                saveLicenseData();

                // Ph·∫£n h·ªìi th√†nh c√¥ng
                respDoc["lid"] = lid;
                respDoc["nod"] = globalLicense.nod; // c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng thi·∫øt b·ªã
                respDoc["status"] = 0;              // Th√†nh c√¥ng
                sendResponse(config_id, id_src, LIC_SET_LICENSE | 0x80, respDoc, from);
                Serial.println("‚úÖ C·∫≠p nh·∫≠t gi·∫•y ph√©p th√†nh c√¥ng: LID = " + String(lid) + ", ID = " + String(id));
                led.setState(FLASH_TWICE); // ch·ªõp LED 3 l·∫ßn ƒë·ªÉ x√°c nh·∫≠n
                while (led.isBusy())
                {
                    delay(10); // Ch·ªù LED ho√†n th√†nh ch·ªõp
                }
                // ch·ªù ng·∫Øt r·ªìi reset
                //  delay(200);
                ESP.restart(); // Kh·ªüi ƒë·ªông l·∫°i thi·∫øt b·ªã sau khi c·∫≠p nh·∫≠t gi·∫•y ph√©p
            }
            else
            {
                respDoc["status"] = 3; // license h·∫øt h·∫°n
                respDoc["nod"] = globalLicense.nod;
                sendResponse(config_id, id_src, LIC_SET_LICENSE | 0x80, respDoc, from);
                Serial.println("‚ùå Gi·∫•y ph√©p h·∫øt hi·ªáu l·ª±c");
                led.setState(CONNECTION_ERROR);
            }
        }
        else
        {
            // sai th√¥ng tin LID ho·∫∑c ID
            respDoc["status"] = 1; // LID ho·∫∑c ID kh√¥ng h·ª£p l·ªá
            respDoc["error_msg"] = error_msg;
            Serial.println("‚ùå L·ªói: " + error_msg + " (LID = " + String(lid) + ", ID = " + String(id) + ", config_id = " + String(config_id) + ")");
            sendResponse(config_id, id_src, LIC_SET_LICENSE | 0x80, respDoc, from);
            led.setState(CONNECTION_ERROR);
        }
        break;
    }

    case LIC_GET_LICENSE:
    {
        JsonObject data = doc["data"].as<JsonObject>();
        int lid = data["lid"].as<int>();
        DynamicJsonDocument respDoc(256);

        // Ki·ªÉm tra LID c√≥ h·ª£p l·ªá kh√¥ng
        if (lid == config_lid || lid == 0)
        {
            respDoc["lid"] = globalLicense.lid;
            respDoc["created"] = globalLicense.created;
            respDoc["expired"] = globalLicense.expired_flag ? 1 : 0;
            respDoc["duration"] = globalLicense.duration;
            respDoc["remain"] = globalLicense.remain;
            respDoc["nod"] = globalLicense.nod;
            respDoc["status"] = 0; // Th√†nh c√¥ng
            Serial.println("‚úÖ License info sent for LID = " + String(lid));
            sendResponse(config_id, id_src, LIC_GET_LICENSE | 0x80, respDoc, from);
            led.setState(FLASH_TWICE); // ch·ªõp x√°c nh·∫≠n truy v·∫•n OK

            // ƒê·ª£i LED ch·ªõp xong r·ªìi hi·ªÉn  th·ªã tr·∫°ng th√°i License
            while (led.isBusy())
            {
                led.update(); // duy tr√¨ hi·ªáu ·ª©ng nh·∫•p nh√°y
                delay(10);    // Ch·ªù LED ho√†n th√†nh ch·ªõp
            }
            // Sau khi ch·ªõp xong, hi·ªÉn th·ªã tr·∫°ng th√°i License
            if (globalLicense.expired_flag || globalLicense.remain <= 0)
            {
                Serial.println(F("üîí License ƒë√£ H·∫æT H·∫†N!"));
                led.setState(LICENSE_EXPIRED); // LED t·∫Øt
            }
            else
            {
                Serial.printf("üîì License c√≤n %lu ph√∫t\n", globalLicense.remain);
                led.setState(NORMAL_STATUS); // LED s√°ng li√™n t·ª•c
            }
        }
        else
        {
            Serial.println("‚ùå LID kh√¥ng h·ª£p l·ªá: " + String(lid));
            led.setState(CONNECTION_ERROR);
        }
        break;
    }

    case CONFIG_DEVICE:
    {
        JsonObject data = doc["data"].as<JsonObject>();
        int lid = data["new_lid"].as<int>();
        uint32_t nod = data["nod"].as<uint32_t>();
        int id = data["new_id"].as<int>(); // M·∫∑c ƒë·ªãnh l·∫•y config_id

        DynamicJsonDocument respDoc(256);
        bool isValid = false;
        String error_msg; // th√¥ng b√°o l·ªói

        // Ki·ªÉm tra LID v√† ID v√† s·ªë l∆∞·ª£ng thi·∫øt b·ªã (NOD)
        if (lid == 0)
        {
            isValid = false;
            error_msg = "LID kh√¥ng h·ª£p l·ªá";
        }
        else if (id == 0)
        {
            isValid = false;
            error_msg = "ID kh√¥ng h·ª£p l·ªá";
        }
        else if (id != config_id)
        {
            isValid = false;
            error_msg = "ID kh√¥ng kh·ªõp v·ªõi thi·∫øt b·ªã n√†y";
        }
        else
        {
            isValid = true;
        }
        if (isValid)
        {
            // C·∫≠p nh·∫≠t c·∫•u h√¨nh
            globalLicense.lid = lid;
            globalLicense.id = id;
            globalLicense.nod = nod;

            preferences.begin("license", false);
            preferences.putUInt("lid", globalLicense.lid);
            preferences.putUInt("id", globalLicense.id);
            preferences.putUInt("nod", globalLicense.nod);
            preferences.end();

            // ch·ªõp LED ƒë·ªÉ x√°c nh·∫≠n
            led.setState(FLASH_TWICE); // ch·ªõp 3 l·∫ßn
            Serial.println("‚úÖ C·∫•u h√¨nh th√†nh c√¥ng: LID = " + String(lid) + ", ID = " + String(id) + ", NOD = " + String(nod));

            respDoc["status"] = 0;
            respDoc["lid"] = globalLicense.lid;
            respDoc["id"] = globalLicense.id;
            respDoc["nod"] = globalLicense.nod;
        }
        else
        {
            respDoc["status"] = 1;
            respDoc["error_msg"] = error_msg;
            Serial.println("‚ùå L·ªói: " + error_msg + " (LID = " + String(lid) + ", ID = " + String(id) + ", config_id = " + String(config_id) + ")");
        }

        sendResponse(config_id, id_src, CONFIG_DEVICE | 0x80, respDoc, from);
        break;
    }

    case LIC_LICENSE_DELETE:
    {
        int lid = doc["data"]["lid"].as<int>();
        DynamicJsonDocument respDoc(256);
        respDoc["lid"] = lid;
        respDoc["status"] = (lid == globalLicense.lid) ? 0 : 3; // Th√†nh c√¥ng ho·∫∑c kh√¥ng t√¨m th·∫•y
        if (lid == globalLicense.lid)
        {
            // X√≥a license b·∫±ng c√°ch ƒë·∫∑t v·ªÅ gi√° tr·ªã m·∫∑c ƒë·ªãnh
            globalLicense.lid = 0;
            globalLicense.created = 0;
            globalLicense.duration = 0;
            globalLicense.remain = 0;
            globalLicense.expired_flag = false;
            saveLicenseData(); // L∆∞u tr·∫°ng th√°i m·ªõi
        }
        sendResponse(config_id, id_src, LIC_LICENSE_DELETE | 0x80, respDoc, from);
        Serial.println(lid == globalLicense.lid ? "‚úÖ ƒê√£ x√≥a license cho LID = " + String(lid) : "‚ùå Kh√¥ng t√¨m th·∫•y license cho LID = " + String(lid));
        led.setState(lid == globalLicense.lid ? NORMAL_STATUS : CONNECTION_ERROR);
        break;
    }

    case LIC_LICENSE_DELETE_ALL:
    {
        // X√≥a t·∫•t c·∫£ license
        globalLicense.lid = 0;
        globalLicense.created = 0;
        globalLicense.duration = 0;
        globalLicense.remain = 0;
        globalLicense.expired_flag = false;
        saveLicenseData(); // L∆∞u tr·∫°ng th√°i m·ªõi
        DynamicJsonDocument respDoc(256);
        respDoc["status"] = 0; // Th√†nh c√¥ng
        sendResponse(config_id, id_src, LIC_LICENSE_DELETE_ALL | 0x80, respDoc, from);
        Serial.println("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ license.");
        led.setState(NORMAL_STATUS);
        break;
    }

    case LIC_TIME_GET:
    {
        DynamicJsonDocument respDoc(256);
        respDoc["time"] = millis() / 1000; // Tr·∫£ v·ªÅ th·ªùi gian receiver
        respDoc["status"] = 0;
        sendResponse(config_id, id_src, LIC_TIME_GET | 0x80, respDoc, from);
        Serial.println("‚úÖ Time info sent.");
        break;
    }

    case LIC_INFO:
    {
        DynamicJsonDocument respDoc(256);
        respDoc["deviceName"] = globalLicense.deviceName;
        respDoc["version"] = globalLicense.version;
        respDoc["status"] = 0;
        sendResponse(config_id, id_src, LIC_INFO_RESPONSE, respDoc, from);
        Serial.println("‚úÖ Device info sent.");
        break;
    }

    default:
    {
        DynamicJsonDocument respDoc(256);
        respDoc["status"] = 255; // Opcode kh√¥ng x√°c ƒë·ªãnh
        sendResponse(config_id, id_src, opcode | 0x80, respDoc, from);
        Serial.printf("‚ùå Unknown opcode: 0x%02X\n", opcode);
        led.setState(CONNECTION_ERROR);
        break;
    }
    }
}
#endif // PROTOCOL_HANDLER_H
