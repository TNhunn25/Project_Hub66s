#ifndef MESH_HANDLER_H
#define MESH_HANDLER_H

#include <painlessMesh.h>
#include <ArduinoJson.h>
#include "config.h"
#include "protocol_handler.h" // prototype c·ªßa sendResponse(...)

// Th√¥ng s·ªë m·∫°ng mesh
#define MESH_SSID "Hub66sMesh"
#define MESH_PASSWORD "mesh_pass_456"
#define MESH_PORT 5555
#define MESH_CHANNEL 2 // K√™nh WiFi cho mesh tr√πng v·ªõi sender


// ƒê·ªëi t∆∞·ª£ng mesh
extern painlessMesh mesh;

extern bool dang_gui; // c·ªù ƒëang g·ª≠i

// Helper: chuy·ªÉn MAC string "AA:BB:CC:DD:EE:FF" ‚Üí m·∫£ng byte[6]
inline void parseMacString(const String &macStr, uint8_t *mac)
{
    int macBytes[6];
    if (sscanf(macStr.c_str(), "%x:%x:%x:%x:%x:%x",
               &macBytes[0], &macBytes[1], &macBytes[2],
               &macBytes[3], &macBytes[4], &macBytes[5]) == 6)
    {
        for (int i = 0; i < 6; ++i)
        {
            mac[i] = static_cast<uint8_t>(macBytes[i]);
        }
    }
}

// Callback khi nh·∫≠n message t·ª´ mesh
inline void meshReceivedCallback(uint32_t from, String &msg)
{
    // 1) In th√¥ ƒë·ªÉ debug
    Serial.printf("[mesh] RAW from %u: |%s|\n", from, msg.c_str());

    // 2) Lo·∫°i b·ªè kho·∫£ng tr·∫Øng, newline ƒë·∫ßu/cu·ªëi
    msg.trim();
    if (msg.isEmpty()) {
        Serial.println("[mesh] Empty after trim, skip");
        return;
    }

    // 3) N·∫øu kh√¥ng ph·∫£i JSON (kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng '{'), ch·ªâ in text
    if (!msg.startsWith("{")) {
        Serial.printf("[mesh] Text message: %s\n", msg.c_str());
        return;
    }

    // 4) B√¢y gi·ªù msg ch·∫Øc ch·∫Øn JSON ‚Üí parse
    StaticJsonDocument<512> doc;
    auto err = deserializeJson(doc, msg);
    if (err) {
        Serial.print("[mesh] JSON parse error: ");
        Serial.println(err.c_str());
        return;
    }

    // 5) L·∫•y c√°c tr∆∞·ªùng
    int     id_src = doc["id_src"].as<int>();
    int     id_des = doc["id_des"].as<int>();
    uint8_t opcode = doc["opcode"].as<uint8_t>();
    String  mac_src = doc["mac_src"].as<String>();
    String  mac_des = doc["mac_des"].as<String>();

    // 6) ƒê∆∞a ph·∫ßn data v√†o DynamicJsonDocument
    DynamicJsonDocument dataDoc(256);
    dataDoc.set(doc["data"]);

    // 7) T√≠nh node ƒë√≠ch (d√πng 'from' ·ªü ƒë√¢y)
    uint32_t destNode = from;

    // 8) G·ª≠i response n·∫øu c·∫ßn
    sendResponse(id_src, id_des, opcode, dataDoc, destNode);

    // 9) G·ªçi h√†m x·ª≠ l√Ω JSON chuy√™n s√¢u
    onMeshReceive(from, msg);

    // 10) Reset flag g·ª≠i
    dang_gui = false;
}

// Kh·ªüi t·∫°o mesh network
inline void initMesh()
{
    Serial.println("Kh·ªüi t·∫°o Mesh...");
    // ESP-NOW ·ªü receiver.ino ƒë√£ g·ªçi WiFi.mode(WIFI_STA)
    WiFi.mode(WIFI_AP_STA);
    delay(100); // ƒê·ª£i WiFi mode ·ªïn ƒë·ªãnh

    WiFi.setTxPower(WIFI_POWER_2dBm);

    // Ch·ªâ log ERROR, STARTUP, CONNECTION ·ªü v√≠ d·ª• n√†y
    mesh.setDebugMsgTypes(ERROR | STARTUP | CONNECTION);

    // init(meshID, password, port, WiFiMode, channel)
    mesh.init(MESH_SSID, MESH_PASSWORD, MESH_PORT, WIFI_AP_STA, MESH_CHANNEL);

    // ƒêƒÉng k√Ω callback
    mesh.onReceive(&meshReceivedCallback);
    Serial.println("‚úÖ mesh_handler: painlessMesh initialized");
}

// -----------------------------------------------------------------------------
// H√†m g·ªçi trong loop() ƒë·ªÉ c·∫≠p nh·∫≠t mesh
// -----------------------------------------------------------------------------
inline void meshLoop()
{
    mesh.update();
}

// G·ª≠i broadcast t·ªõi to√†n m·∫°ng

inline void broadcastMeshMessage(const String &json)
{
    Serial.println("üì§ G·ª≠i broadcast t·ªõi mesh: " + json);

    // N·∫øu ƒëang g·ª≠i th√¨ kh√¥ng g·ª≠i n·ªØa
    if (dang_gui)
    {
        Serial.println("‚ùå ƒêang g·ª≠i, kh√¥ng th·ªÉ g·ª≠i broadcast");
        return;
    }

    // Reset c·ªù g·ª≠i
    dang_gui = false;

    // T·∫°o message struct
    message.payload[0] = '\0'; // ƒê·∫£m b·∫£o payload r·ªóng tr∆∞·ªõc khi copy
    json.toCharArray(message.payload, sizeof(message.payload));
    Serial.printf("üì§ [mesh] broadcast: %s\n", message.payload);

    // G·ª≠i broadcast
    bool ok = mesh.sendBroadcast(message.payload);
    if (!ok)
    {
        Serial.println("‚ùå G·ª≠i broadcast th·∫•t b·∫°i");
        led.setState(CONNECTION_ERROR);
    }
    else
    {
        Serial.println("‚úÖ G·ª≠i broadcast th√†nh c√¥ng");
        led.setState(FLASH_TWICE); // Ch·ªõp LED 2 l·∫ßn ƒë·ªÉ x√°c nh·∫≠n g·ª≠i th√†nh c√¥ng
    }
}
#endif // MESH_HANDLER_H
