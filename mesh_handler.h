#ifndef MESH_HANDLER_H
#define MESH_HANDLER_H
#include <WiFi.h>
#include <Arduino.h>
#include <painlessMesh.h>
#include <ArduinoJson.h>
#include <set>

#include "config.h"
// #include "protocol_handler.h"

// ƒê·ªëi t∆∞·ª£ng mesh
extern painlessMesh mesh;

// C·ªù b√°o mesh ƒë√£ init xong
extern bool meshReady;

// Danh s√°ch node ƒë√£ k·∫øt n·ªëi ƒë·ªÉ tr√°nh k·∫øt n·ªëi l·∫°i kh√¥ng c·∫ßn thi·∫øt
inline std::set<uint32_t> connectedNodes;

void onMeshReceive(uint32_t from, String &msg);

// Callback nh·∫≠n d·ªØ li·ªáu t·ª´ mesh
inline void meshReceiveCb(uint32_t from, String &msg)
{
    // B·ªè qua g√≥i tin do ch√≠nh node ph√°t ra
    if (from == mesh.getNodeId())
        return;

    // B·ªè qua nh·ªØng frame kh√¥ng ph·∫£i JSON
    if (!msg.startsWith("{"))
        return;

    // Ph√¢n t√≠ch JSON ƒë·ªÉ ki·ªÉm tra id ngu·ªìn
    StaticJsonDocument<256> doc;
    DeserializationError error = deserializeJson(doc, msg);

    if (error)
    {
        Serial.print(" Json parse failed: ");
        Serial.println(error.c_str());
        return;
    }

    // N·∫øu id ngu·ªìn tr√πng v·ªõi id c·ªßa thi·∫øt b·ªã th√¨ b·ªè qua
    int id_src = doc["id_src"] | 0;
    if (id_src == config_id)
        return;

    Serial.printf("[mesh RX] from %u: %s\n", from, msg.c_str());

    // G·ªçi handler JSON chuy√™n bi·ªát
    onMeshReceive(from, msg);
}

// Kh·ªüi t·∫°o mesh network
inline void initMesh()
{
    Serial.println("Kh·ªüi t·∫°o Mesh...");
    WiFi.mode(WIFI_AP_STA);
    delay(100); // ƒê·ª£i WiFi mode ·ªïn ƒë·ªãnh

    // Ch·ªâ log ERROR, STARTUP, CONNECTION ·ªü v√≠ d·ª• n√†y
    mesh.setDebugMsgTypes(ERROR | STARTUP); // N·∫øu c·∫ßn hi·ªán k·∫øt n·ªëi th√¨ th√™m CONNECTION

    // init(meshID, password, port, WiFiMode, channel)
    mesh.init(MESH_SSID, MESH_PASSWORD, MESH_PORT, WIFI_AP_STA, MESH_CHANNEL);

    // ƒêƒÉng k√Ω callback
    mesh.onReceive(&meshReceiveCb);
    Serial.println("‚úÖ [mesh_handler] Kh·ªüi t·∫°o painlessMesh th√†nh c√¥ng");

    // Log khi c√≥ node m·ªõi k·∫øt n·ªëi v√†o mesh
    // mesh.onNewConnection([](uint32_t nodeId)
    //                      { mac_nhan = nodeId; // L∆∞u MAC nh·∫≠n
    //                         Serial.printf("‚ûï Node %u v·ª´a tham gia mesh\n", nodeId); });

    // // Log khi c√≥ thay ƒë·ªïi k·∫øt n·ªëi trong mesh (node v√†o/ra)
    // mesh.onChangedConnections([]()
    //                           {
    // Serial.printf("üîÑ Danh s√°ch node hi·ªán t·∫°i: ");
    // for (auto n : mesh.getNodeList()) Serial.printf("%u ", n);
    // Serial.println(); });

    // Log khi c√≥ node m·ªõi k·∫øt n·ªëi v√†o mesh, tr√°nh l·∫∑p l·∫°i n·∫øu ƒë√£ k·∫øt n·ªëi
    mesh.onNewConnection([&](uint32_t nodeId)
                         {
                             if (connectedNodes.count(nodeId) == 0)
                             {
                                 connectedNodes.insert(nodeId);
                                 mac_nhan = nodeId; // L∆∞u MAC nh·∫≠n
                                 Serial.printf("‚ûï Node %u v·ª´a tham gia mesh\n", nodeId);
                             } });

    // Khi c√≥ node r·ªùi kh·ªèi mesh, lo·∫°i b·ªè kh·ªèi danh s√°ch
    mesh.onDroppedConnection([&](uint32_t nodeId)
                             {
                                  connectedNodes.erase(nodeId);
                                  Serial.printf("‚ûñ Node %u ƒë√£ r·ªùi mesh\n", nodeId); });

    // Log khi c√≥ thay ƒë·ªïi k·∫øt n·ªëi trong mesh (node v√†o/ra)
    mesh.onChangedConnections([&]()
                              {
                                  auto nodeList = mesh.getNodeList();
                                  Serial.printf("üîÑ Danh s√°ch node hi·ªán t·∫°i c√≥ t·ªïng %u node: ",
                                                (unsigned int)nodeList.size());
                                  connectedNodes.clear();
                                  for (auto n : nodeList)
                                  {
                                      Serial.printf("%u ", n);
                                      connectedNodes.insert(n);
                                  }
                                  Serial.println(); });

    meshReady = true;
    Serial.println("‚úÖ M·∫°ng mesh ƒë√£ s·∫µn s√†ng");
}

// inline void sendToNode(uint32_t nodeId, const String &message)
// {
//     mesh.sendSingle(nodeId, message);
//     Serial.printf("üì§ Sent to node %u: %s\n", nodeId, message.c_str());
// }

// inline void meshLoop()
// {
//     mesh.update();
// }

inline void sendToNode(uint32_t nodeId, const String &message)
{
    mesh.sendSingle(nodeId, message);
    Serial.printf("üì§ Sent to node %u: %s\n", nodeId, message.c_str());
}

inline void sendToAllNodes(const String &message)
{
    bool ok = mesh.sendBroadcast(message);
    Serial.printf("üì§ Broadcast %s: %s\n", ok ? "OK" : "FAIL", message.c_str());
}

inline void meshLoop()
{
    mesh.update();
}

#endif // MESH_HANDLER_H