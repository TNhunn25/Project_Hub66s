// #ifndef HUB66S_LED_DISPLAY_H
// #define HUB66S_LED_DISPLAY_H

// #include "config.h" // ƒë·ªÉ truy c·∫≠p globalLicense.expired_flag
// #include <Arduino.h>
// // #include "serial.h"

// namespace Hub66s {

// class LedDisplay {
// public:
//     void begin() {
//         Serial.println(F("üñ•Ô∏è Kh·ªüi t·∫°o ƒëi·ªÅu khi·ªÉn m√†n h√¨nh LED..."));

//         // Thi·∫øt l·∫≠p ch√¢n ho·∫∑c m√†n h√¨nh theo lo·∫°i b·∫°n d√πng
//         pinMode(screenPin_, OUTPUT);
//         digitalWrite(screenPin_, LOW); // m√†n h√¨nh ban ƒë·∫ßu t·∫Øt

//         lastUpdate_ = millis();
//     }

//     // G·ªçi ƒë·ªãnh k·ª≥ trong loop()
//     void update() {
//         if (!globalLicense.expired_flag) {
//             showNormalDisplay();
//         } else {
//             showExpiredEffect();
//         }
//     }

// private:
//     const uint8_t screenPin_ = 13; // c√≥ th·ªÉ thay b·∫±ng ch√¢n ƒëi·ªÅu khi·ªÉn m√†n h√¨nh th·∫≠t
//     unsigned long lastUpdate_ = 0;
//     uint8_t glitchState_ = 0;

//     // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ C√≤n h·∫°n: hi·ªÉn th·ªã b√¨nh th∆∞·ªùng ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//     void showNormalDisplay() {
//         static bool isOn = false;
//         if (!isOn) {
//             Serial.println(F("üîì License c√≤n h·∫°n ‚Üí b·∫≠t m√†n h√¨nh LED"));
//             digitalWrite(screenPin_, HIGH); // b·∫≠t LED / m√†n h√¨nh
//             isOn = true;
//         }

//         // B·∫°n c√≥ th·ªÉ th√™m hi·ªáu ·ª©ng ch·∫°y ch·ªØ, animation ·ªü ƒë√¢y
//         // displayText("Welcome to Event!");
//     }

//     // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ H·∫øt h·∫°n: hi·ªáu ·ª©ng glitch/nh·∫•p nh√°y ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
//     void showExpiredEffect() {
//         unsigned long now = millis();
//         if (now - lastUpdate_ >= 400) {
//             lastUpdate_ = now;

//             glitchState_ = (glitchState_ + 1) % 4;

//             // Gi·∫£ l·∫≠p hi·ªáu ·ª©ng l·ªói b·∫±ng c√°ch nh·∫•p nh√°y pin
//             switch (glitchState_) {
//                 case 0:
//                     Serial.println(F("üõë H·∫øt h·∫°n: S√°ng v√πng tr√°i"));
//                     digitalWrite(screenPin_, HIGH);
//                     break;
//                 case 1:
//                     Serial.println(F("üõë H·∫øt h·∫°n: S√°ng v√πng ph·∫£i"));
//                     digitalWrite(screenPin_, LOW);
//                     break;
//                 case 2:
//                     Serial.println(F("üõë H·∫øt h·∫°n: Nh√°y nhanh v√πng gi·ªØa"));
//                     digitalWrite(screenPin_, HIGH);
//                     break;
//                 case 3:
//                     Serial.println(F("üõë H·∫øt h·∫°n: T·∫Øt to√†n b·ªô"));
//                     digitalWrite(screenPin_, LOW);
//                     break;
//             }

//             // B·∫°n c√≥ th·ªÉ thay b·∫±ng hi·ªáu ·ª©ng LED matrix th·∫≠t ·ªü ƒë√¢y
//         }
//     }
// };

// } // namespace Hub66s

// #endif // HUB66S_LED_DISPLAY_H

#ifndef HUB66S_LED_DISPLAY_H
#define HUB66S_LED_DISPLAY_H

#include "config.h" // ƒë·ªÉ truy c·∫≠p globalLicense.expired_flag
#include <Arduino.h>
// #include "serial.h"

namespace Hub66s
{

    class LedDisplay
    {
    public:
        /**
         * @brief Kh·ªüi t·∫°o ph·∫ßn c·ª©ng ƒëi·ªÅu khi·ªÉn m√†n h√¨nh LED.
         *        T·∫•t c·∫£ c√°c ch√¢n t·ª´ 1 ƒë·∫øn 12 ƒë∆∞·ª£c c·∫•u h√¨nh OUTPUT v√† ·ªü m·ª©c LOW.
         */
        void begin()
        {
            Serial.println(F("üñ•Ô∏è Kh·ªüi t·∫°o ƒëi·ªÅu khi·ªÉn m√†n h√¨nh LED..."));

            // Thi·∫øt l·∫≠p c√°c ch√¢n LED v√† t·∫Øt t·∫•t c·∫£
            for (uint8_t i = 1; i < 13; ++i)
            {
                pinMode(i, OUTPUT);
                digitalWrite(i, LOW);
            }

            // pinMode(screenPin_, OUTPUT);   // ch√¢n ƒëi·ªÅu khi·ªÉn ch√≠nh
            // digitalWrite(screenPin_, LOW); // m√†n h√¨nh ban ƒë·∫ßu t·∫Øt

            lastFlash_ = millis();
            lastRandom_ = millis();
        }

        /**
         * @brief G·ªçi ƒë·ªãnh k·ª≥ trong loop().
         *        N·∫øu license c√≤n h·∫°n ‚Üí nh√°y c√°c ch√¢n flashPins_[].
         *        N·∫øu h·∫øt h·∫°n          ‚Üí hi·ªÉn th·ªã hi·ªáu ·ª©ng randomRGB.
         */
        void update()
        {
            if (!globalLicense.expired_flag)
            {
                for (uint8_t i = 1; i < 13; ++i)
                {
                    pinMode(i, OUTPUT);
                    digitalWrite(i, LOW);
                }
            }
            else
            {
                randomRGB();
            }
        }

    private:
        // const uint8_t screenPin_ = 13;                           // C√≥ th·ªÉ thay b·∫±ng ch√¢n ƒëi·ªÅu khi·ªÉn m√†n h√¨nh th·∫≠t
        const uint8_t flashPins_[4] = {8, 10, 1, 4};             // C√°c ch√¢n nh·∫•p nh√°y khi c√≤n h·∫°n
        const uint8_t groupRGB_[8] = {7, 9, 12, 11, 3, 2, 6, 5}; // Nh√≥m RGB ng·∫´u nhi√™n khi h·∫øt h·∫°n

        unsigned long lastFlash_ = 0;
        bool flashState_ = false;
        unsigned long lastRandom_ = 0;

        /**
         * @brief Hi·ªáu ·ª©ng nh·∫•p nh√°y c√°c ch√¢n flashPins_ m·ªói gi√¢y.
         */
        void flashPinData()
        {
            unsigned long now = millis();
            if (now - lastFlash_ >= 1000)
            {
                lastFlash_ = now;
                flashState_ = !flashState_;
                for (uint8_t pin : flashPins_)
                {
                    digitalWrite(pin, flashState_ ? HIGH : LOW);
                }
            }
        }

        /**
         * @brief Hi·ªÉn th·ªã hi·ªáu ·ª©ng ng·∫´u nhi√™n tr√™n groupRGB_ m·ªói 500 ms.
         */
        void randomRGB()
        {
            unsigned long now = millis();
            if (now - lastRandom_ >= 500)
            {
                lastRandom_ = now;
                for (uint8_t pin : groupRGB_)
                {
                    digitalWrite(pin, random(0, 2));
                }
            }
            Serial.println(F("üõë H·∫øt h·∫°n: nh·∫•p nh√°y RGB"));
            delay(1000);
        }
    };

} // namespace Hub66s

#endif // HUB66S_LED_DISPLAY_H
